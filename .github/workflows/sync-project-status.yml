name: Sync Project Status to Jira

on:
  issues:
    types: [opened, edited]
  # Projects v2는 직접 이벤트가 없으므로 주기적 체크 방식 사용
  schedule:
    - cron: '*/1 * * * *'  # 5분마다 실행
  workflow_dispatch:  # 수동 실행 가능

permissions:
  issues: write
  contents: read

jobs:
  sync-status:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Recent Issues
        id: get-issues
        run: |
          # 최근 업데이트된 open 이슈들 가져오기
          ISSUES_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&sort=updated&per_page=10")
          
          # 이슈 번호들 추출
          ISSUE_NUMBERS=$(echo "$ISSUES_RESPONSE" | jq -r '.[].number' | head -5)
          
          echo "Recent issues: $ISSUE_NUMBERS"
          echo "issue_numbers<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUE_NUMBERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check Project Status for Issues
        id: check-projects
        run: |
          # GraphQL을 사용해서 Projects 정보 가져오기
          ISSUE_NUMBERS="${{ steps.get-issues.outputs.issue_numbers }}"
          
          for ISSUE_NUMBER in $ISSUE_NUMBERS; do
            echo "Checking issue #$ISSUE_NUMBER"
            
            # GraphQL 쿼리로 이슈의 프로젝트 정보 가져오기
            QUERY=$(cat << 'EOF'
          {
            "query": "query($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      fieldValues(first: 10) {
                        nodes {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                          }
                        }
                      }
                      project {
                        title
                      }
                    }
                  }
                }
              }
            }",
            "variables": {
              "owner": "${{ github.repository_owner }}",
              "repo": "${{ github.event.repository.name || 'Pawpong_Backend' }}",
              "issueNumber": ISSUE_NUMBER
            }
          }
          EOF
          )
            
            PROJECT_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$QUERY" \
              https://api.github.com/graphql)
            
            echo "Project response for issue #$ISSUE_NUMBER:"
            echo "$PROJECT_RESPONSE" | jq '.'
            
            # Status 필드 값 추출
            STATUS=$(echo "$PROJECT_RESPONSE" | jq -r '
              .data.repository.issue.projectItems.nodes[0].fieldValues.nodes[] |
              select(.field.name == "Status") |
              .name // empty
            ')
            
            if [ -n "$STATUS" ]; then
              echo "Issue #$ISSUE_NUMBER Status: $STATUS"
              
              # Jira 상태 매핑 및 업데이트
              case "$STATUS" in
                "Todo"|"To Do"|"할 일")
                  ./update_jira_status.sh "$ISSUE_NUMBER" "할 일"
                  ;;
                "In Progress"|"진행 중")
                  ./update_jira_status.sh "$ISSUE_NUMBER" "진행 중"
                  ;;
                "Done"|"완료")
                  ./update_jira_status.sh "$ISSUE_NUMBER" "완료"
                  ;;
                *)
                  echo "Unknown status: $STATUS"
                  ;;
              esac
            fi
          done

      - name: Create Update Script
        run: |
          cat > update_jira_status.sh << 'EOF'
          #!/bin/bash
          ISSUE_NUMBER=$1
          TARGET_STATUS=$2
          
          echo "Updating Jira status for issue #$ISSUE_NUMBER to $TARGET_STATUS"
          
          # GitHub 이슈의 댓글에서 Jira 링크 찾기
          COMMENTS_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments)
          
          # Jira 이슈 키 추출
          JIRA_ISSUE_KEY=$(echo "$COMMENTS_RESPONSE" | jq -r '.[].body' | grep -oE 'PP-[0-9]+' | head -1)
          
          if [ -z "$JIRA_ISSUE_KEY" ]; then
            echo "❌ No Jira issue found for #$ISSUE_NUMBER"
            exit 0
          fi
          
          echo "Found Jira issue: $JIRA_ISSUE_KEY"
          
          # 현재 상태 확인
          CURRENT_RESPONSE=$(curl -s \
            -H "Authorization: Basic ${{ secrets.JIRA_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_ISSUE_KEY")
          
          CURRENT_STATUS=$(echo "$CURRENT_RESPONSE" | jq -r '.fields.status.name')
          
          if [ "$CURRENT_STATUS" = "$TARGET_STATUS" ]; then
            echo "✅ Already in correct status: $TARGET_STATUS"
            exit 0
          fi
          
          # 전환 가능한 상태 조회
          TRANSITIONS_RESPONSE=$(curl -s \
            -H "Authorization: Basic ${{ secrets.JIRA_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_ISSUE_KEY/transitions")
          
          # 원하는 전환 ID 찾기
          TRANSITION_ID=$(echo "$TRANSITIONS_RESPONSE" | jq -r ".transitions[] | select(.name | test(\"$TARGET_STATUS\"; \"i\")) | .id" | head -1)
          
          if [ -z "$TRANSITION_ID" ] || [ "$TRANSITION_ID" = "null" ]; then
            echo "❌ No transition found for: $TARGET_STATUS"
            exit 0
          fi
          
          # 상태 변경
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Basic ${{ secrets.JIRA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_ISSUE_KEY/transitions")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          
          if [ "$HTTP_CODE" = "204" ]; then
            echo "✅ Updated $JIRA_ISSUE_KEY: $CURRENT_STATUS → $TARGET_STATUS"
          else
            echo "❌ Failed to update $JIRA_ISSUE_KEY"
          fi
          EOF
          
          chmod +x update_jira_status.sh
