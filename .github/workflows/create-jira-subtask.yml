name: Create Jira Subtask

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  create-jira-subtask:
    runs-on: ubuntu-latest
    
    steps:
      - name: Extract Jira Story Key
        id: extract-jira-key
        run: |
          STORY_NUMBER=$(echo "${{ github.event.issue.body }}" | grep -oE '[0-9]+' | head -1)
          if [ -z "$STORY_NUMBER" ]; then
            echo "❌ No story number found"
            exit 1
          fi
          JIRA_KEY="PP-$STORY_NUMBER"
          echo "jira_key=$JIRA_KEY" >> $GITHUB_OUTPUT
          echo "✅ Built Jira Key: $JIRA_KEY"

      - name: Extract Assignee
        id: extract-assignee
        run: |
          # GitHub 이슈의 assignee를 확인
          GITHUB_ASSIGNEE="${{ github.event.issue.assignee.login }}"
          
          echo "GitHub Assignee: $GITHUB_ASSIGNEE"
          
          case "$GITHUB_ASSIGNEE" in
            "rtaeho")
              JIRA_ASSIGNEE="712020:d5bf4833-dffc-4259-9ff0-d9657a3d8d1c"
              ASSIGNEE_NAME="류태호"
              ;;
            "kscold")
              JIRA_ASSIGNEE="712020:cf51e65d-f7c5-4e37-b9f9-9b9380858e0c"
              ASSIGNEE_NAME="김승찬"
              ;;
            *)
              JIRA_ASSIGNEE=""
              ASSIGNEE_NAME=""
              ;;
          esac
          
          echo "assignee_name=$ASSIGNEE_NAME" >> $GITHUB_OUTPUT
          echo "jira_assignee=$JIRA_ASSIGNEE" >> $GITHUB_OUTPUT
          echo "✅ GitHub Assignee: $GITHUB_ASSIGNEE -> Jira: $JIRA_ASSIGNEE ($ASSIGNEE_NAME)"

      - name: Extract Issue Description
        id: extract-description
        run: |
          # 작업 설명 부분만 추출
          DESCRIPTION=$(echo "${{ github.event.issue.body }}" | sed -n '/작업 설명/,/완료 조건/p' | sed '1d;$d' | sed '/^$/d' | head -10 | tr '\n' ' ')
          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="GitHub에서 생성된 작업"
          fi
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "✅ Description: $DESCRIPTION"

      - name: Create Jira Subtask
        id: create-subtask
        run: |
          echo "Creating Jira Sub-task for story: ${{ steps.extract-jira-key.outputs.jira_key }}"
          echo "Assignee: ${{ steps.extract-assignee.outputs.jira_assignee }}"
          echo "Description: ${{ steps.extract-description.outputs.description }}"
          
          # 기본 페이로드 생성
          PAYLOAD=$(jq -n \
            --arg project "PP" \
            --arg parent "${{ steps.extract-jira-key.outputs.jira_key }}" \
            --arg summary "${{ github.event.issue.title }}" \
            --arg description "${{ steps.extract-description.outputs.description }}" \
            '{
              "fields": {
                "project": {"key": $project},
                "parent": {"key": $parent},
                "summary": $summary,
                "description": {
                  "type": "doc",
                  "version": 1,
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": $description
                        }
                      ]
                    }
                  ]
                },
                "issuetype": {"name": "하위 작업"}
              }
            }')
          
          # 담당자가 있으면 추가
          if [ -n "${{ steps.extract-assignee.outputs.jira_assignee }}" ]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq \
              --arg assignee "${{ steps.extract-assignee.outputs.jira_assignee }}" \
              '.fields.assignee = {"accountId": $assignee}')
            echo "✅ Added assignee to payload"
          fi
          
          echo "Sending payload:"
          echo "$PAYLOAD"
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Basic ${{ secrets.JIRA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d "$PAYLOAD" \
            ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue)
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "201" ]; then
            JIRA_ISSUE_KEY=$(echo "$RESPONSE_BODY" | jq -r '.key')
            echo "✅ Created Jira Sub-task: $JIRA_ISSUE_KEY"
            echo "jira_issue_key=$JIRA_ISSUE_KEY" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to create Jira Sub-task: $RESPONSE_BODY"
            exit 1
          fi

      - name: Add Success Comment
        if: steps.create-subtask.outputs.jira_issue_key
        uses: actions/github-script@v7
        with:
          script: |
            const jiraIssueKey = '${{ steps.create-subtask.outputs.jira_issue_key }}';
            const parentStory = '${{ steps.extract-jira-key.outputs.jira_key }}';
            const jiraBaseUrl = '${{ secrets.JIRA_BASE_URL }}';
            const assigneeName = '${{ steps.extract-assignee.outputs.assignee_name }}';
            
            let assigneeText = '';
            if (assigneeName) {
              assigneeText = `\n**담당자:** ${assigneeName}`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔗 **Jira 하위 작업 생성 완료**

            **하위 작업:** [${jiraIssueKey}](${jiraBaseUrl}/browse/${jiraIssueKey})
            **상위 스토리:** [${parentStory}](${jiraBaseUrl}/browse/${parentStory})${assigneeText}

            > GitHub 이슈와 Jira 하위 작업이 자동 연결되었습니다.`
            });
